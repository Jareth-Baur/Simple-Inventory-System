
import java.io.*;
import javax.swing.*;
import java.sql.*;

public class Display_Purchase extends javax.swing.JFrame {

    /**
     * Creates new form Display_Purchase
     */
    public Display_Purchase() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jToggleButton1 = new javax.swing.JToggleButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        displayTable = new javax.swing.JTable();
        displayButton = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        addItemLabel = new javax.swing.JLabel();
        addQuantityLabel = new javax.swing.JLabel();
        addPriceLabel = new javax.swing.JLabel();
        addItemField = new javax.swing.JTextField();
        addQuantityField = new javax.swing.JTextField();
        addPriceField = new javax.swing.JTextField();
        addButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        clearButton = new javax.swing.JButton();
        deleteField = new javax.swing.JTextField();
        deleteItemLabel = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        purchaseTable = new javax.swing.JTable();
        noOfItemsLabel = new javax.swing.JButton();
        cashLabel = new javax.swing.JButton();
        noOfItemsField = new javax.swing.JTextField();
        cashField = new javax.swing.JTextField();
        totalPriceLabel = new javax.swing.JButton();
        changeLabel = new javax.swing.JButton();
        totalPriceField = new javax.swing.JTextField();
        changeField = new javax.swing.JTextField();
        payButton = new javax.swing.JButton();
        purchaseClearButton = new javax.swing.JButton();
        purchaseItemIDLabel = new javax.swing.JButton();
        purchaseQuantityLabel = new javax.swing.JButton();
        purchaseIDField = new javax.swing.JTextField();
        purchaseQuantityField = new javax.swing.JTextField();
        purchaseButton = new javax.swing.JButton();
        itemsPurchasedLabel = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        itemField = new javax.swing.JTextField();
        newItemNameLabel = new javax.swing.JButton();
        newQuantityLabel = new javax.swing.JButton();
        newPriceLabel = new javax.swing.JButton();
        newItemNameField = new javax.swing.JTextField();
        newQuantityField = new javax.swing.JTextField();
        newPriceField = new javax.swing.JTextField();
        updateItemLabel = new javax.swing.JLabel();
        saveUpdateButton = new javax.swing.JButton();

        jButton1.setText("jButton1");

        jLabel4.setText("jLabel4");

        jToggleButton1.setText("jToggleButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Display_Add/Dlete_Update_Purchase");

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(0, 0, 0), new java.awt.Color(255, 51, 255)));
        jPanel1.setForeground(new java.awt.Color(204, 255, 255));

        displayTable.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(0, 0, 0), new java.awt.Color(255, 51, 204)));
        displayTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Item ID", "Item Name", "Quantity", "Unit Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        displayTable.setSelectionBackground(new java.awt.Color(204, 255, 255));
        displayTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(displayTable);
        if (displayTable.getColumnModel().getColumnCount() > 0) {
            displayTable.getColumnModel().getColumn(0).setPreferredWidth(10);
            displayTable.getColumnModel().getColumn(1).setPreferredWidth(150);
            displayTable.getColumnModel().getColumn(2).setPreferredWidth(10);
            displayTable.getColumnModel().getColumn(3).setPreferredWidth(10);
        }

        displayButton.setFont(new java.awt.Font("Vani", 1, 24)); // NOI18N
        displayButton.setForeground(new java.awt.Color(255, 51, 153));
        displayButton.setText("Display");
        displayButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, null, new java.awt.Color(0, 0, 0), new java.awt.Color(51, 153, 255), null));
        displayButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayButtonActionPerformed(evt);
            }
        });

        jTabbedPane1.setBackground(new java.awt.Color(51, 51, 51));
        jTabbedPane1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(0, 0, 0), new java.awt.Color(255, 51, 153)));
        jTabbedPane1.setForeground(new java.awt.Color(255, 255, 255));
        jTabbedPane1.setTabPlacement(javax.swing.JTabbedPane.LEFT);
        jTabbedPane1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        jPanel2.setBackground(new java.awt.Color(204, 255, 255));
        jPanel2.setForeground(new java.awt.Color(204, 255, 255));

        addItemLabel.setBackground(new java.awt.Color(51, 153, 255));
        addItemLabel.setFont(new java.awt.Font("Vani", 1, 14)); // NOI18N
        addItemLabel.setText("Item");
        addItemLabel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(0, 0, 0), new java.awt.Color(255, 51, 153)));

        addQuantityLabel.setBackground(new java.awt.Color(51, 153, 255));
        addQuantityLabel.setFont(new java.awt.Font("Vani", 1, 14)); // NOI18N
        addQuantityLabel.setText("Quantity");
        addQuantityLabel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(0, 0, 0), new java.awt.Color(255, 51, 153)));

        addPriceLabel.setBackground(new java.awt.Color(51, 153, 255));
        addPriceLabel.setFont(new java.awt.Font("Vani", 1, 14)); // NOI18N
        addPriceLabel.setText("Price");
        addPriceLabel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(0, 0, 0), new java.awt.Color(255, 51, 204)));

        addItemField.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(0, 0, 0), new java.awt.Color(255, 51, 153)));
        addItemField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addItemFieldActionPerformed(evt);
            }
        });

        addQuantityField.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(0, 0, 0), new java.awt.Color(255, 51, 153)));
        addQuantityField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addQuantityFieldActionPerformed(evt);
            }
        });

        addPriceField.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(0, 0, 0), new java.awt.Color(255, 51, 153)));
        addPriceField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addPriceFieldActionPerformed(evt);
            }
        });

        addButton.setFont(new java.awt.Font("Vani", 1, 14)); // NOI18N
        addButton.setForeground(new java.awt.Color(255, 51, 153));
        addButton.setText("Add");
        addButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(0, 0, 0), new java.awt.Color(51, 153, 255)));
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        deleteButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        deleteButton.setText("Delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        clearButton.setFont(new java.awt.Font("Vani", 1, 14)); // NOI18N
        clearButton.setForeground(new java.awt.Color(255, 51, 153));
        clearButton.setText("Clear");
        clearButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(0, 0, 0), new java.awt.Color(51, 153, 255)));
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });

        deleteField.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(0, 0, 0), new java.awt.Color(255, 51, 153)));
        deleteField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteFieldActionPerformed(evt);
            }
        });

        deleteItemLabel.setBackground(new java.awt.Color(51, 153, 255));
        deleteItemLabel.setFont(new java.awt.Font("Vani", 1, 14)); // NOI18N
        deleteItemLabel.setText("Item");
        deleteItemLabel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(0, 0, 0), new java.awt.Color(255, 51, 153)));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(55, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(clearButton, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(53, 53, 53))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(addPriceLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(deleteItemLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(addQuantityLabel)
                            .addComponent(addItemLabel))
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(22, 22, 22)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(addItemField, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(addQuantityField, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(addPriceField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 115, Short.MAX_VALUE))))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(deleteField, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(64, Short.MAX_VALUE))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(deleteButton)
                .addGap(83, 83, 83))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(74, 74, 74)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addItemField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addItemLabel))
                .addGap(40, 40, 40)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addQuantityField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addQuantityLabel))
                .addGap(42, 42, 42)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addPriceField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addPriceLabel))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(clearButton)
                    .addComponent(addButton))
                .addGap(64, 64, 64)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deleteField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deleteItemLabel))
                .addGap(18, 18, 18)
                .addComponent(deleteButton)
                .addContainerGap(86, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Add/Delete", jPanel2);

        jPanel4.setBackground(new java.awt.Color(51, 255, 255));
        jPanel4.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(0, 0, 0), new java.awt.Color(255, 51, 102)));
        jPanel4.setForeground(new java.awt.Color(255, 51, 153));

        purchaseTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Quantity", "Item Name", "Unit Price", "Total Price"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Double.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        purchaseTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(purchaseTable);
        if (purchaseTable.getColumnModel().getColumnCount() > 0) {
            purchaseTable.getColumnModel().getColumn(0).setPreferredWidth(10);
            purchaseTable.getColumnModel().getColumn(1).setPreferredWidth(150);
            purchaseTable.getColumnModel().getColumn(2).setPreferredWidth(10);
            purchaseTable.getColumnModel().getColumn(3).setPreferredWidth(10);
        }

        noOfItemsLabel.setText("No. of items");

        cashLabel.setText("Cash");

        noOfItemsField.setEditable(false);
        noOfItemsField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                noOfItemsFieldActionPerformed(evt);
            }
        });

        cashField.setEditable(false);

        totalPriceLabel.setText("Total Price");

        changeLabel.setText("Change");

        totalPriceField.setEditable(false);
        totalPriceField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                totalPriceFieldActionPerformed(evt);
            }
        });

        changeField.setEditable(false);

        payButton.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        payButton.setText("Pay");
        payButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                payButtonActionPerformed(evt);
            }
        });

        purchaseClearButton.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        purchaseClearButton.setText("Clear");
        purchaseClearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                purchaseClearButtonActionPerformed(evt);
            }
        });

        purchaseItemIDLabel.setFont(new java.awt.Font("Vani", 1, 12)); // NOI18N
        purchaseItemIDLabel.setForeground(new java.awt.Color(255, 51, 153));
        purchaseItemIDLabel.setText("Item ID");
        purchaseItemIDLabel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(0, 0, 0), new java.awt.Color(51, 153, 255)));

        purchaseQuantityLabel.setFont(new java.awt.Font("Vani", 1, 12)); // NOI18N
        purchaseQuantityLabel.setForeground(new java.awt.Color(255, 51, 153));
        purchaseQuantityLabel.setText("Quantity");

        purchaseIDField.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(0, 0, 0), new java.awt.Color(255, 51, 153)));

        purchaseQuantityField.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(0, 0, 0), new java.awt.Color(255, 51, 153)));
        purchaseQuantityField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                purchaseQuantityFieldActionPerformed(evt);
            }
        });

        purchaseButton.setFont(new java.awt.Font("Vani", 1, 24)); // NOI18N
        purchaseButton.setForeground(new java.awt.Color(255, 51, 153));
        purchaseButton.setText("Purchase");
        purchaseButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(0, 0, 0), new java.awt.Color(51, 153, 255)));
        purchaseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                purchaseButtonActionPerformed(evt);
            }
        });

        itemsPurchasedLabel.setFont(new java.awt.Font("Vani", 1, 24)); // NOI18N
        itemsPurchasedLabel.setText("Item(s) Purchased");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(94, 94, 94)
                        .addComponent(payButton)
                        .addGap(119, 119, 119)
                        .addComponent(purchaseClearButton))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(cashLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(noOfItemsLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cashField, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(noOfItemsField, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(39, 39, 39)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(totalPriceLabel)
                                .addGap(18, 18, 18)
                                .addComponent(totalPriceField, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(changeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(changeField, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addComponent(itemsPurchasedLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(118, 118, 118))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(purchaseQuantityLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(purchaseQuantityField, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(purchaseItemIDLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(purchaseIDField, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(purchaseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(purchaseItemIDLabel)
                            .addComponent(purchaseIDField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(purchaseQuantityLabel)
                            .addComponent(purchaseQuantityField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(purchaseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(35, 35, 35)
                .addComponent(itemsPurchasedLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(noOfItemsField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(noOfItemsLabel)
                    .addComponent(totalPriceLabel)
                    .addComponent(totalPriceField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cashLabel)
                    .addComponent(cashField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(changeLabel)
                    .addComponent(changeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(payButton)
                    .addComponent(purchaseClearButton))
                .addGap(43, 43, 43))
        );

        jTabbedPane1.addTab(" Purchase", jPanel4);

        jPanel5.setBackground(new java.awt.Color(204, 255, 255));
        jPanel5.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(0, 0, 0), new java.awt.Color(255, 51, 153)));

        newItemNameLabel.setText("Change Item Name");

        newQuantityLabel.setText("Quantity");

        newPriceLabel.setText("Price");

        newItemNameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newItemNameFieldActionPerformed(evt);
            }
        });

        newQuantityField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newQuantityFieldActionPerformed(evt);
            }
        });

        newPriceField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newPriceFieldActionPerformed(evt);
            }
        });

        updateItemLabel.setText("Item");

        saveUpdateButton.setText("Save Changes");
        saveUpdateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveUpdateButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(updateItemLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(itemField, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(newPriceLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(newQuantityLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(newItemNameLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(newQuantityField)
                            .addComponent(newPriceField)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(newItemNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap(77, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(saveUpdateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(141, 141, 141))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(itemField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(updateItemLabel))
                .addGap(58, 58, 58)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(newItemNameLabel)
                    .addComponent(newItemNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(40, 40, 40)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(newQuantityLabel)
                    .addComponent(newQuantityField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(41, 41, 41)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(newPriceLabel)
                    .addComponent(newPriceField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(saveUpdateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(132, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Update", jPanel5);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 455, Short.MAX_VALUE)
                        .addGap(18, 18, 18))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(144, 144, 144)
                        .addComponent(displayButton, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 569, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addComponent(displayButton, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 485, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void displayButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayButtonActionPerformed
        // Display Button

        try {
            // Clear the table before populating it with new data
            for (int r = 0; r < 100; r++) { // initializing row
                for (int c = 0; c < 4; c++) { // initializing column
                    displayTable.setValueAt(null, r, c);
                }
            }

            // Database connection details
            String url = "jdbc:mysql://localhost:3306/inventory_db";
            String user = "root"; // replace with your MySQL username
            String password = ""; // replace with your MySQL password

            // Establishing the connection
            Connection conn = DriverManager.getConnection(url, user, password);

            // SQL query to select all items
            String query = "SELECT * FROM items";
            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery(query);

            int x = 0; // row index
            while (rs.next()) {
                displayTable.setValueAt(rs.getInt("id"), x, 0); // set the ID from the database
                displayTable.setValueAt(rs.getString("name"), x, 1);
                displayTable.setValueAt(rs.getInt("quantity"), x, 2);
                displayTable.setValueAt(rs.getDouble("price"), x, 3);
                x++;
            }

            // Closing resources
            rs.close();
            stmt.close();
            conn.close();

        } catch (SQLException e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_displayButtonActionPerformed

    private void purchaseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_purchaseButtonActionPerformed
        // Purchase Button

        try {
            // Database connection details
            String url = "jdbc:mysql://localhost:3306/inventory_db";
            String user = "root"; // replace with your MySQL username
            String password = ""; // replace with your MySQL password

            int idx = Integer.parseInt(purchaseIDField.getText()); // assuming this is the actual item ID in the database
            int qty = Integer.parseInt(purchaseQuantityField.getText());

            boolean found = false;
            boolean edited = false;

            // Establishing the connection
            Connection conn = DriverManager.getConnection(url, user, password);

            // Check if item exists and get current quantity and price
            String selectQuery = "SELECT name, quantity, price FROM items WHERE id = ?";
            PreparedStatement selectStmt = conn.prepareStatement(selectQuery);
            selectStmt.setInt(1, idx);
            ResultSet rs = selectStmt.executeQuery();

            if (rs.next()) {
                found = true;
                String name = rs.getString("name");
                int qty_prv = rs.getInt("quantity");
                double price = rs.getDouble("price");

                if (qty > qty_prv) {
                    JOptionPane.showMessageDialog(null, "Item Shortage!", "Oops!", JOptionPane.WARNING_MESSAGE);
                } else if (qty_prv == 0) {
                    JOptionPane.showMessageDialog(null, "Out of Stock!", "Oops!", JOptionPane.WARNING_MESSAGE);
                } else {
                    int qty_new = qty_prv - qty;

                    // Update the item quantity in the database
                    String updateQuery = "UPDATE items SET quantity = ? WHERE id = ?";
                    PreparedStatement updateStmt = conn.prepareStatement(updateQuery);
                    updateStmt.setInt(1, qty_new);
                    updateStmt.setInt(2, idx);
                    updateStmt.executeUpdate();
                    updateStmt.close();

                    // Update the table
                    int r = Row.getRow();
                    purchaseTable.setValueAt(qty, r, 0);
                    purchaseTable.setValueAt(name, r, 1);
                    purchaseTable.setValueAt(price, r, 2);
                    double total = qty * price;
                    purchaseTable.setValueAt(total, r, 3);
                    Row.setRow();

                    edited = true;
                }
            }

            if (!found) {
                JOptionPane.showMessageDialog(null, purchaseIDField.getText() + ": Item Not Available!", "Oops!", JOptionPane.ERROR_MESSAGE);
            }

            // Close resources
            rs.close();
            selectStmt.close();
            conn.close();

            if (edited) {
                payButton.setEnabled(true);
            }

            purchaseIDField.setText("");
            purchaseQuantityField.setText("");

        } catch (SQLException e) {
            e.printStackTrace();
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Some input may be invalid!", "Oops!", JOptionPane.ERROR_MESSAGE);

            purchaseIDField.setText("");
            purchaseQuantityField.setText("");
        }

    }//GEN-LAST:event_purchaseButtonActionPerformed

    private void purchaseQuantityFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_purchaseQuantityFieldActionPerformed
        purchaseButtonActionPerformed(evt);
    }//GEN-LAST:event_purchaseQuantityFieldActionPerformed

    private void purchaseClearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_purchaseClearButtonActionPerformed
        //Clear Button(Purchase)

        for (int r = 0; r < 100; r++) //initializing row
        {
            for (int c = 0; c < 4; c++) //initializing column
            {
                purchaseTable.setValueAt(null, r, c);
            }
        }
        payButton.setEnabled(true);
        noOfItemsField.setText("");
        cashField.setText("");
        totalPriceField.setText("");
        changeField.setText("");
        Row.setRow(0);
        purchaseButton.setEnabled(true);
    }//GEN-LAST:event_purchaseClearButtonActionPerformed

    private void payButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_payButtonActionPerformed
        // Pay Button (Purchase)

        try {
            double total = 0.0;
            int itms = 0;

            // Loop through the jTable2 to calculate the total price and total items
            for (int r = 0; purchaseTable.getValueAt(r, 0) != null; r++) {
                int quantity = Integer.parseInt(purchaseTable.getValueAt(r, 0).toString());
                double price = Double.parseDouble(purchaseTable.getValueAt(r, 2).toString());
                itms += quantity;
                total += quantity * price;
            }

            // Update text fields
            noOfItemsField.setText(String.valueOf(itms));
            totalPriceField.setText(String.valueOf(total));

            // Process payment
            double cash;
            do {
                cash = Double.parseDouble(JOptionPane.showInputDialog("Cash Payment:"));
                if (cash < total) {
                    JOptionPane.showMessageDialog(null, "Insufficient Cash!", null, JOptionPane.WARNING_MESSAGE);
                }
            } while (cash < total);

            // Update text fields
            cashField.setText(String.valueOf(cash));
            changeField.setText(String.valueOf(cash - total));
            purchaseButton.setEnabled(false);

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Invalid!", "", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_payButtonActionPerformed

    private void totalPriceFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_totalPriceFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_totalPriceFieldActionPerformed

    private void noOfItemsFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_noOfItemsFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_noOfItemsFieldActionPerformed

    private void deleteFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteFieldActionPerformed
        deleteButtonActionPerformed(evt);
    }//GEN-LAST:event_deleteFieldActionPerformed

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        //Clear Button(Add/Delete)

        addItemField.setText("");
        addQuantityField.setText("");
        addPriceField.setText("");
    }//GEN-LAST:event_clearButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        // Delete Button

        if (deleteField.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Enter item!", "Oops Wait...!", JOptionPane.ERROR_MESSAGE);
        } else {
            // Database connection details
            String url = "jdbc:mysql://localhost:3306/inventory_db";
            String user = "root"; // replace with your MySQL username
            String password = ""; // replace with your MySQL password

            String delete = deleteField.getText();
            boolean found = false;

            try {
                // Establishing the connection
                Connection conn = DriverManager.getConnection(url, user, password);

                // Check if the item exists
                String queryCheck = "SELECT * FROM items WHERE name = ?";
                try (PreparedStatement pstmtCheck = conn.prepareStatement(queryCheck)) {
                    pstmtCheck.setString(1, delete);
                    try (ResultSet rs = pstmtCheck.executeQuery()) {
                        if (rs.next()) {
                            found = true;
                        }
                    }
                }

                if (found) {
                    // Item found, proceed to delete
                    String queryDelete = "DELETE FROM items WHERE name = ?";
                    try (PreparedStatement pstmtDelete = conn.prepareStatement(queryDelete)) {
                        pstmtDelete.setString(1, delete);
                        pstmtDelete.executeUpdate();
                    }

                    JOptionPane.showMessageDialog(null, "Successfully Deleted!", "Ok! :-)", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(null, "Item is already not in the list!", "Oops!", JOptionPane.ERROR_MESSAGE);
                }

                // Close the connection
                conn.close();

            } catch (SQLException e) {
                e.printStackTrace();
            }

            deleteField.setText("");
        }
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        // Add Button

        if (addItemField.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Enter item!", "Oops Wait...!", JOptionPane.ERROR_MESSAGE);
        } else {
            String prod = addItemField.getText();
            int qty = 0;
            double price = 0.0;
            boolean found = false;

            try {
                qty = Integer.parseInt(addQuantityField.getText());
                price = Double.parseDouble(addPriceField.getText());

                // Database connection details
                String url = "jdbc:mysql://localhost:3306/inventory_db";
                String user = "root"; // replace with your MySQL username
                String password = ""; // replace with your MySQL password

                // Establishing the connection
                Connection conn = DriverManager.getConnection(url, user, password);

                // Check if item already exists
                String checkQuery = "SELECT COUNT(*) FROM items WHERE name = ?";
                try (PreparedStatement checkStmt = conn.prepareStatement(checkQuery)) {
                    checkStmt.setString(1, prod);
                    try (ResultSet rs = checkStmt.executeQuery()) {
                        if (rs.next() && rs.getInt(1) > 0) {
                            found = true;
                        }
                    }
                }

                if (found) {
                    JOptionPane.showMessageDialog(null, "Item already exist!\nSuggestion: Update Item", "", JOptionPane.WARNING_MESSAGE);
                } else {
                    // Insert new item
                    String insertQuery = "INSERT INTO items (name, quantity, price) VALUES (?, ?, ?)";
                    try (PreparedStatement insertStmt = conn.prepareStatement(insertQuery)) {
                        insertStmt.setString(1, prod);
                        insertStmt.setInt(2, qty);
                        insertStmt.setDouble(3, price);
                        insertStmt.executeUpdate();
                    }
                    JOptionPane.showMessageDialog(null, "Successfully Added!", "Ok!  :-)", JOptionPane.INFORMATION_MESSAGE);
                }

                // Close the connection
                conn.close();

            } catch (SQLException e) {
                e.printStackTrace();
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Some input may be invalid!", "Warning!", JOptionPane.WARNING_MESSAGE);
            }

            addItemField.setText("");
            addQuantityField.setText("");
            addPriceField.setText("");
        }

    }//GEN-LAST:event_addButtonActionPerformed

    private void addPriceFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addPriceFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_addPriceFieldActionPerformed

    private void addQuantityFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addQuantityFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_addQuantityFieldActionPerformed

    private void addItemFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addItemFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_addItemFieldActionPerformed

    private void newItemNameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newItemNameFieldActionPerformed
        saveUpdateButtonActionPerformed(evt);
    }//GEN-LAST:event_newItemNameFieldActionPerformed

    private void newQuantityFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newQuantityFieldActionPerformed
        saveUpdateButtonActionPerformed(evt);
    }//GEN-LAST:event_newQuantityFieldActionPerformed

    private void saveUpdateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveUpdateButtonActionPerformed
        // Save Changes (Update)
        try {
            if (itemField.getText().equals("")) {
                JOptionPane.showMessageDialog(null, "Enter item!", "Oops Wait...!", JOptionPane.ERROR_MESSAGE);
            } else {
                // Database connection details
                String url = "jdbc:mysql://localhost:3306/inventory_db";
                String user = "root"; // replace with your MySQL username
                String password = ""; // replace with your MySQL password

                // Establishing the connection
                Connection conn = DriverManager.getConnection(url, user, password);

                String search = itemField.getText();
                String prod = newItemNameField.getText();
                String Qty = newQuantityField.getText();
                String Price = newPriceField.getText();

                if (!(prod.equals("")) || !(Qty.equals("")) || !(Price.equals(""))) {
                    // Check if item exists
                    String selectQuery = "SELECT * FROM items WHERE name = ?";
                    PreparedStatement selectStmt = conn.prepareStatement(selectQuery);
                    selectStmt.setString(1, search);
                    ResultSet rs = selectStmt.executeQuery();

                    if (rs.next()) {
                        int itemId = rs.getInt("id");
                        int qty = rs.getInt("quantity");
                        double price = rs.getDouble("price");

                        if (!prod.equals("")) {
                            // Update product name
                            String updateProdQuery = "UPDATE items SET name = ? WHERE id = ?";
                            PreparedStatement updateProdStmt = conn.prepareStatement(updateProdQuery);
                            updateProdStmt.setString(1, prod);
                            updateProdStmt.setInt(2, itemId);
                            updateProdStmt.executeUpdate();
                            updateProdStmt.close();
                        }

                        if (!Qty.equals("")) {
                            int newQty = qty + Integer.parseInt(Qty);
                            // Update quantity
                            String updateQtyQuery = "UPDATE items SET quantity = ? WHERE id = ?";
                            PreparedStatement updateQtyStmt = conn.prepareStatement(updateQtyQuery);
                            updateQtyStmt.setInt(1, newQty);
                            updateQtyStmt.setInt(2, itemId);
                            updateQtyStmt.executeUpdate();
                            updateQtyStmt.close();
                        }

                        if (!Price.equals("")) {
                            // Update price
                            String updatePriceQuery = "UPDATE items SET price = ? WHERE id = ?";
                            PreparedStatement updatePriceStmt = conn.prepareStatement(updatePriceQuery);
                            updatePriceStmt.setDouble(1, Double.parseDouble(Price));
                            updatePriceStmt.setInt(2, itemId);
                            updatePriceStmt.executeUpdate();
                            updatePriceStmt.close();
                        }

                        JOptionPane.showMessageDialog(null, "Changes Saved!");
                    } else {
                        JOptionPane.showMessageDialog(null, "Item Not Found!");
                    }

                    rs.close();
                    selectStmt.close();
                } else {
                    JOptionPane.showMessageDialog(null, "No Changes Yet!");
                }

                // Close the connection
                conn.close();

                itemField.setText("");
                newItemNameField.setText("");
                newQuantityField.setText("");
                newPriceField.setText("");
            }

        } catch (SQLException e) {
            e.printStackTrace();
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Some input may be invalid!");

            itemField.setText("");
            newItemNameField.setText("");
            newQuantityField.setText("");
            newPriceField.setText("");
        }
    }//GEN-LAST:event_saveUpdateButtonActionPerformed

    private void newPriceFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newPriceFieldActionPerformed
        saveUpdateButtonActionPerformed(evt);
    }//GEN-LAST:event_newPriceFieldActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JTextField addItemField;
    private javax.swing.JLabel addItemLabel;
    private javax.swing.JTextField addPriceField;
    private javax.swing.JLabel addPriceLabel;
    private javax.swing.JTextField addQuantityField;
    private javax.swing.JLabel addQuantityLabel;
    private javax.swing.JTextField cashField;
    private javax.swing.JButton cashLabel;
    private javax.swing.JTextField changeField;
    private javax.swing.JButton changeLabel;
    private javax.swing.JButton clearButton;
    private javax.swing.JButton deleteButton;
    private javax.swing.JTextField deleteField;
    private javax.swing.JLabel deleteItemLabel;
    private javax.swing.JButton displayButton;
    private javax.swing.JTable displayTable;
    private javax.swing.JTextField itemField;
    private javax.swing.JLabel itemsPurchasedLabel;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JToggleButton jToggleButton1;
    private javax.swing.JTextField newItemNameField;
    private javax.swing.JButton newItemNameLabel;
    private javax.swing.JTextField newPriceField;
    private javax.swing.JButton newPriceLabel;
    private javax.swing.JTextField newQuantityField;
    private javax.swing.JButton newQuantityLabel;
    private javax.swing.JTextField noOfItemsField;
    private javax.swing.JButton noOfItemsLabel;
    private javax.swing.JButton payButton;
    private javax.swing.JButton purchaseButton;
    private javax.swing.JButton purchaseClearButton;
    private javax.swing.JTextField purchaseIDField;
    private javax.swing.JButton purchaseItemIDLabel;
    private javax.swing.JTextField purchaseQuantityField;
    private javax.swing.JButton purchaseQuantityLabel;
    private javax.swing.JTable purchaseTable;
    private javax.swing.JButton saveUpdateButton;
    private javax.swing.JTextField totalPriceField;
    private javax.swing.JButton totalPriceLabel;
    private javax.swing.JLabel updateItemLabel;
    // End of variables declaration//GEN-END:variables
}
